@model MvcSiteMapProvider.Web.Html.Models.MenuHelperModel
@using System.Web.Mvc.Html
@using MvcSiteMapProvider.Web.Html.Models

@helper  Menu(List<SiteMapNodeModel> nodeList)
{
<ul id="mainnav-menu" class="list-group">
    <li class="list-divider mar-no"></li>
    <li class="list-header">Navigation</li>
    @foreach (SiteMapNodeModel node in nodeList)
    {
        string url = node.IsClickable ? node.Url : "javascript:void(0)";
        string icon = string.Empty;

        if (node.Attributes.ContainsKey("icon"))
        {
            icon = String.Concat("<i class=\"menu-icon ", node.Attributes["icon"].ToString(), "\"></i>");
        }

        if (!node.Children.Any())
        {
            <li class="@((node.IsCurrentNode || node.Descendants.Any(n => n.IsCurrentNode)) ? "active-link" : "")">
                <a href="@url">
                    @Html.Raw(@icon)
                    <span class="menu-title">@node.Title</span>
                </a>
            </li>
        }
        else
        {
            <li class="@((node.IsCurrentNode || node.Descendants.Any(n => n.IsCurrentNode)) ? "active-sub active" : "")">

                <a href="#">
                    @Html.Raw(@icon)
                    <span class="menu-title">@node.Title</span>
                    <i class="arrow"></i>
                </a>
                @DropDownMenu(node.Children)
            </li>
        }

        if (node != nodeList.Last())
        {
        }
    }
    <li class="list-divider"></li>
</ul><!-- /.nav-list -->


}

@helper DropDownMenu(SiteMapNodeModelList nodeList)
{
    <ul class="collapse">
        @foreach (SiteMapNodeModel node in nodeList)
        {
            string url = node.IsClickable ? node.Url : "#";
            string icon = string.Empty;
            
            if(node.Attributes.ContainsKey("icon")){
                icon = String.Concat("<i class=\"menu-icon ", node.Attributes["icon"].ToString(),"\"></i>");
            }

            if (!node.Children.Any())
            {
                string area = node.Area;
                string parentController = node.Parent.Controller;
                string nodeAction = node.Action;

                string newID = "";
                
                if (nodeAction.ToUpper() == "INDEX") { nodeAction = "index"; }

                if (area == parentController)
                {
                    newID = String.Concat(@node.Parent.Controller, @node.Controller, nodeAction);
                }
                else {
                    newID = String.Concat(@node.Area, @node.Parent.Controller, @node.Action);
                }

                <li class="@((node.IsCurrentNode || node.Descendants.Any(n => n.IsCurrentNode)) ? "active-link" : "")">
                    <a href="@url">
                        @Html.Raw(@icon)
                        @node.Title
                    </a>
                </li>
            }
            else
            {
                <li class="@((node.IsCurrentNode || node.Descendants.Any(n => n.IsCurrentNode)) ? "active-sub active" : "")">
                    <a class="dropdown-toggle" href="javascript:void(0)">
                        @Html.Raw(@icon)
                        <span class="menu-text">@node.Title</span>
                        <b class="arrow fa fa-angle-down"></b>
                    </a>
                    @DropDownMenu(node.Children)
                </li>
            }
        }
    </ul>
}


@Menu(Model.Nodes)


